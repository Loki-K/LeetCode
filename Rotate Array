Created by Loki on 2016/10/20.

解法一：
最后一步开始是直接对数组变量赋值，但是这样明显是错误的，因为改变了形参的指向，对实参却没有什么用：nums = result;

public class Solution {
    public void rotate(int[] nums, int k) {
        if(nums.length == 1) return;
        int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++) {
            result[(i + k) % nums.length] = nums[i];
        }
        for(int i = 0; i < nums.length; i++) {
            nums[i] = result[i];
        }
    }
}

解法二：

public class Solution {
    public void rotate(int[] nums, int k) {
        k %= nums.length; //很重要
        reverse(nums, 0, nums.length - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, nums.length - 1);
    }
    public void reverse(int[] nums, int start, int end) {
        while (start < end) { //注意条件
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}

解法三：

这个是leetcode上的解析，但我也想到了这个办法，问题出在没有处理好当轮转到以前轮转过的元素时应该怎样处理。而本例中，当轮转到以前轮转过的元素时，
重新开始指定start元素。

public class Solution {
    public void rotate(int[] nums, int k) {
        k = k % nums.length;//不能忘了
        int count = 0;
        for (int start = 0; count < nums.length; start++) {
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) % nums.length;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            } while (start != current);
        }
    }
}
