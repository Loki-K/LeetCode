Created by Loki on 2016/10/25.

思路：
  如果不是happy number则会一直循环，但是整数的个数是有限的。
  
public class Solution {
    public boolean isHappy(int n) {
        
        Set<Integer> preValue = new HashSet<>();
        int temp = 0;
        
        while(temp != 1) {
            temp = 0;
            while(n != 0) {
                temp += Math.pow(n % 10, 2);
                n /= 10;
            }
            
            if(preValue.contains(temp)) return false; //if come back to the same number.
            
            preValue.add(temp);
            n = temp;
        }
        
        return true;
    }
}

下面是discuss中的一个c解法，跟链表循环有异曲同工之妙。

int digitSquareSum(int n) {
    int sum = 0, tmp;
    while (n) {
        tmp = n % 10;
        sum += tmp * tmp;
        n /= 10;
    }
    return sum;
}

bool isHappy(int n) {
    int slow, fast;
    slow = fast = n;
    do {
        slow = digitSquareSum(slow);
        fast = digitSquareSum(fast);
        fast = digitSquareSum(fast);
    } while(slow != fast);
    if (slow == 1) return 1;
    else return 0;
}

